import ta_neo4j_declare

import os
import sys
import time
import datetime

import modinput_wrapper.base_modinput
from splunklib import modularinput as smi



import input_module_neo4j as input_module


'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file neo4j.py
'''
class ModInputneo4j(modinput_wrapper.base_modinput.SingleInstanceModInput):

    def __init__(self):
        super(ModInputneo4j, self).__init__("ta_neo4j", "neo4j")

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = smi.Scheme("neo4j")
        scheme.title = ("neo4j input")
        scheme.description = ("")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True
        scheme.use_single_instance = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))
        scheme.add_argument(smi.Argument("strURI", title="restful endpoint",
                                         description="http://localhost:7474/db/data/cypher",
                                         required_on_create=True,
                                         required_on_edit=True))
        scheme.add_argument(smi.Argument("strQuery", title="legacy cypher query",
                                         description="{  \"query\" : \"CREATE (n:Person { name : {name} }) RETURN n\",  \"params\" : {    \"name\" : \"Andres\"  }}",
                                         required_on_create=True,
                                         required_on_edit=True))
        return scheme

    def get_app_name(self):
        return "TA-neo4j"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, inputs, ew):
        """write out the events"""
        input_module.collect_events(self, inputs, ew)

if __name__ == "__main__":
    exitcode = ModInputneo4j().run(sys.argv)
    sys.exit(exitcode)
